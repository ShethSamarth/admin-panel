generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id @default(uuid()) @map("_id")
  fname     String
  lname     String
  admin     Boolean   @default(false)
  mobile    Int?
  email     String    @unique
  password  String
  adresses  Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id        String   @id @default(uuid()) @map("_id")
  address   String
  city      String
  state     String
  country   String
  zip       Int
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum SHIPPING_TYPE {
  WEIGHT
  PIECES
}

model Product {
  id               String           @id @default(uuid()) @map("_id")
  name             String
  image            String[]
  code             String
  description      String?
  colorGroup       String?
  marketPrice      Float
  discount         Float
  offerPrice       Float
  vendorPrice      Float?
  weight           Float?
  categoryId       String[]
  categories       Category[]       @relation(fields: [categoryId], references: [id])
  subCategoryId    String[]
  subCategory      SubCategory[]    @relation(fields: [subCategoryId], references: [id])
  subSubCategoryId String[]
  subSubCategory   SubSubCategory[] @relation(fields: [subSubCategoryId], references: [id])
  shippingType     SHIPPING_TYPE
  productRatings   Float
  workId           String[]
  works            Work[]           @relation(fields: [workId], references: [id])
  fabricId         String[]
  fabrics          Fabric[]         @relation(fields: [fabricId], references: [id])
  occasionId       String[]
  occasions        Occasion[]       @relation(fields: [occasionId], references: [id])
  seasonId         String[]
  seasons          Season[]         @relation(fields: [seasonId], references: [id])
  colorId          String[]
  colors           Color[]          @relation(fields: [colorId], references: [id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model Category {
  id            String        @id @default(uuid()) @map("_id")
  name          String
  productId     String[]
  product       Product[]     @relation(fields: [productId], references: [id])
  subCategories SubCategory[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SubCategory {
  id               String           @id @default(uuid()) @map("_id")
  name             String
  categoryId       String
  productId        String[]
  product          Product[]        @relation(fields: [productId], references: [id])
  category         Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subSubCategories SubSubCategory[]
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model SubSubCategory {
  id            String      @id @default(uuid()) @map("_id")
  name          String
  productId     String[]
  product       Product[]   @relation(fields: [productId], references: [id])
  subcategoryId String
  SubCategory   SubCategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Work {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  productId String[]
  product   Product[] @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Fabric {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  productId String[]
  product   Product[] @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Occasion {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  productId String[]
  product   Product[] @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Season {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  productId String[]
  product   Product[] @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Color {
  id        String    @id @default(uuid()) @map("_id")
  name      String
  code      String
  productId String[]
  product   Product[] @relation(fields: [productId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}
